#!/usr/bin/env bash
#
# archon.sh: wrapper for ARChon and chromeos-apk to launch APKs in a single step
#
# Author: Kevin MacMartin
# Released under the MIT license
# Version: 1.2
#

# Current directory
ARCHON_CURRENTDIR="$PWD"

# The APK installation directory
ARCHON_APKROOT=${ARCHON_APKROOT:='/tmp/archon'}

# The archon-exec config file
ARCHON_CONFIG=${ARCHON_CONFIG:="$HOME/.config/archon"}

# The ARChon directory path
ARCHON_PATH=${ARCHON_PATH:='/opt/archon/'}

# Only allow variables set in this script from now on
set -o nounset

# Colourscheme
[[ -t 1 ]] && {
    c_grey=$'\e[1;30m'    # DARK GREY
    c_red=$'\e[1;31m'     # RED
    c_green=$'\e[1;32m'   # GREEN
    c_yellow=$'\e[1;33m'  # YELLOW
    c_blue=$'\e[1;34m'    # BLUE
    c_magenta=$'\e[1;35m' # VIOLET
    c_teal=$'\e[1;36m'    # TEAL
    c_white=$'\e[1;37m'   # WHITE
    c_clear=$'\e[0m'      # DISABLES COLOUR
}

# The script's file name
script="${0//*\/}"

# The argument passed to the script (should be an APK file)
apkfile="$1"

# Display usage information
function usage() {
    printf '%s\n' "${c_blue}USAGE:$c_clear $c_yellow$script$c_clear [${c_white}PATH-TO-APK$c_clear]"
}

# Display an error and exit with an error
function error() {
    printf '%s %s\n' "${c_red}ERROR:$c_clear" "$1" >&2
    exit 1
}

# Evaluate the name of the directory containing the app
function getappdir() {
    for each in "$ARCHON_APKROOT/$checksum/"*; do
        [[ -d "$each" ]] && {
            appdir="$each"
            appdir="${appdir/*\/}"
            break
        }
    done

    # Remove the apk folder and exit with an error if an app directory doesn't exist
    [[ -z "$appdir" ]] && {
        printf '%s\n' "${c_red}ERROR:$c_clear failed to extract APK to: $c_magenta$ARCHON_APKROOT/$checksum$c_clear"
        [[ -d "$ARCHON_APKROOT/$checksum" ]] \
            && rm -rf "${ARCHON_APKROOT:?}/${checksum:?}"
        exit 1
    }
}

# Creates an app directory for the APK
function create_appdir() {
    # Create and enter the folder to contain the extracted APK
    install -d "$ARCHON_APKROOT/$checksum"
    pushd "$ARCHON_APKROOT/$checksum" >/dev/null

    # Generate the APK folder using chromeos-apk
    chromeos-apk -a --tablet "$ARCHON_CURRENTDIR"/"$1" >chromeos-apk.log

    # Fix the "There is no message element for key extName" error
    grep -qr 'appNotSupported' && {
        getappdir
        extname=$(egrep -m 1 '^\s*"name":' "$appdir/manifest.json")
        extname=${extname%\",}
        extname=${extname/*\"}

        for langdir in "$appdir/_locales/"*; do
            [[ -f "$langdir/messages.json" ]] \
                && printf '%s\n  %s\n    %s%s%s\n    %s\n  %s\n%s\n' '{' '"extName": {' '"description": "' "$extname" '",' '"message": ""' '}' '}' > "$langdir/messages.json"
        done
    }

    # Return to the original folder
    popd >/dev/null
}

# Exit with an error if the ARChon directory is missing
[[ -d "$ARCHON_PATH" ]] \
    || error "the ARChon directory configured @ $c_magenta$ARCHON_PATH$c_clear does not exist"

# Set $chrome to the first binary found in $chromenames or exit with an error
chromenames=('chromium' 'chrome' 'google-chrome' 'google-chrome-stable')
for chrome_test in "${chromenames[@]}"; do
    chrome=$(type -P "$chrome_test")
    [[ -n "$chrome" ]] \
        && break
done
[[ -n "$chrome" ]] \
    || error "couldn't detect ${c_magenta}chrome$c_clear/${c_magenta}chromium$c_clear in PATH"

type -P chromeos-apk >/dev/null \
    || error "couldn't detect ${c_magenta}chromeos-apk$c_clear in PATH"

# Show usage information and exit if the user attempts to run without input
if [[ "$apkfile" = '-h' ]] || [[ "$apkfile" = '--help' ]]; then
    usage
    exit 0
fi

[[ -z "$apkfile" ]] \
    && error "no ${c_magenta}APK file$c_clear provided as an argument"

# Display error and exit if $apkfile isn't pointing at a file
[[ -f "$apkfile" ]] \
    || error "no file exists @ $c_magenta$apkfile$c_clear"

# Store the md5sum of the APK so different versions won't overwrite eachother
checksum=$(md5sum "$apkfile")
checksum="${checksum/ *}"

[[ -z "$checksum" ]] \
    && error "unable to calculate the checksum of $c_magenta$apkfile$c_clear"

# Delete the existing apk directory if it doesn't contain exactly one folder
[[ -d "$ARCHON_APKROOT/$checksum" ]] && {
    count=0
    for each in "$ARCHON_APKROOT/$checksum/"*; do
        [[ -d "$each" ]] \
            && (( count++ ))
    done
    [[ "$count" = 1 ]] \
        || rm -rf "${ARCHON_APKROOT:?}/${checksum:?}"
}

# If an app directory doesn't exist, create one and extract the APK using chromeos-apk
if [[ -d "$ARCHON_APKROOT/$checksum" ]]; then
    getappdir
else
    create_appdir "$apkfile"
fi

# The common part of the launch command to launch the extracted APK using ARChon
runchrome="$chrome"' --user-data-dir='"$ARCHON_CONFIG"' --profile-directory='"$appdir"' --silent-launch'

# Start ARChon
$runchrome --load-and-launch-app="$ARCHON_PATH" > /dev/null 2>&1 &
sleep 1

# Launch the Android app
$runchrome --load-and-launch-app="$ARCHON_APKROOT/$checksum/$appdir" > "$ARCHON_APKROOT/$checksum/run.log" 2>&1 &

# Wait a few seconds until chrome has loaded, then remove the non-functional auto-generated XDG desktop file
(
    sleep 5
    rm -f "$HOME/.local/share/applications/chrome-"*"-${appdir}.desktop"
) &

exit 0
